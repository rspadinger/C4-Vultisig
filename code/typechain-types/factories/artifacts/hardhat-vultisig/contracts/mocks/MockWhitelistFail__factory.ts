/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  Contract,
  ContractFactory,
  ContractTransactionResponse,
  Interface,
} from "ethers";
import type { Signer, ContractDeployTransaction, ContractRunner } from "ethers";
import type { NonPayableOverrides } from "../../../../../common";
import type {
  MockWhitelistFail,
  MockWhitelistFailInterface,
} from "../../../../../artifacts/hardhat-vultisig/contracts/mocks/MockWhitelistFail";

const _abi = [
  {
    inputs: [
      {
        internalType: "address",
        name: "from",
        type: "address",
      },
      {
        internalType: "address",
        name: "to",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "amount",
        type: "uint256",
      },
    ],
    name: "checkWhitelist",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
] as const;

const _bytecode =
  "0x608060405234801561001057600080fd5b50610173806100206000396000f3fe608060405234801561001057600080fd5b506004361061002b5760003560e01c806342d5eb2e14610030575b600080fd5b61004a600480360381019061004591906100ea565b61004c565b005b600080fd5b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b600061008182610056565b9050919050565b61009181610076565b811461009c57600080fd5b50565b6000813590506100ae81610088565b92915050565b6000819050919050565b6100c7816100b4565b81146100d257600080fd5b50565b6000813590506100e4816100be565b92915050565b60008060006060848603121561010357610102610051565b5b60006101118682870161009f565b93505060206101228682870161009f565b9250506040610133868287016100d5565b915050925092509256fea2646970667358221220d1a31c5d939f0b8c117f47992ce134a17b7bd7f2d166420c0f7b6a560f15dd6e64736f6c63430008180033";

type MockWhitelistFailConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: MockWhitelistFailConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class MockWhitelistFail__factory extends ContractFactory {
  constructor(...args: MockWhitelistFailConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override getDeployTransaction(
    overrides?: NonPayableOverrides & { from?: string }
  ): Promise<ContractDeployTransaction> {
    return super.getDeployTransaction(overrides || {});
  }
  override deploy(overrides?: NonPayableOverrides & { from?: string }) {
    return super.deploy(overrides || {}) as Promise<
      MockWhitelistFail & {
        deploymentTransaction(): ContractTransactionResponse;
      }
    >;
  }
  override connect(runner: ContractRunner | null): MockWhitelistFail__factory {
    return super.connect(runner) as MockWhitelistFail__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): MockWhitelistFailInterface {
    return new Interface(_abi) as MockWhitelistFailInterface;
  }
  static connect(
    address: string,
    runner?: ContractRunner | null
  ): MockWhitelistFail {
    return new Contract(address, _abi, runner) as unknown as MockWhitelistFail;
  }
}
